Definitions

  Design Pattern - a general, reusable software solution to a commonly-occurring problem. (if you are interested in learning more about design patterns, see: http://en.wikipedia.org/wiki/Software_design_pattern). For example, a dictionary in Python (also called an associative array in some languages) is a design pattern for storing name/value pairs.

  Model-View-Controller (MVC) - A common design pattern for writing web applications. It divides up the web application into three parts:

    Model - the data, along with the business rules for how the data behaves/changes. For example, in a web application, one model might be a User. The data associated with each User might be a username (e.g. 'the.doctor@gmail.com'), a first name ('Doctor'), a last name ('Who'), and a password ('BowTiesAreCool'). A business rule that might be implemented for User model might be that a password must contain at least 8 characters. The model data is often stored in a Database. The model data and its business rules are often implemented using a Class.

    View - a view is how the data can be displayed or entered in the user interface. For example, a view of the User model might be a web page that shows you the username, first name, and last name for a User, or it could be a web page that asks you to enter a new password for a User.

    Controller - a controller accepts input and (depending on the input) uses the Models to manipulate data and the Views to display information. For example, a controller can accept a new password from the "change password" web page, and which instructs the User model to update the password data for a specific User, and then display a View displaying a message that the password was updated.

  Framework - a software "framework" is a set of software that provides general functionality to implement a specific design pattern, and can be extended by additional user-written code to perform a specific function.

  Django - a Python framework for building web sites using the MVC design pattern. A web site built with Django has one or more is built from one or more applications. Each application has its own Models, Views, and Controllers.*

  Heroku - an Internet "Platform as a Service" provider that will run web sites written in various languages/frameworks, including Python/Django (and many others, such as Ruby on Rails, an MVC framework for the Ruby language). Anyone on the Internet can use their browser to access web sites running at Heroku. Web sites can be created at Heroku for free. If they need to be used by many people or to manage a lot of data, then Heroku charges fees for using additional resources.

  Version Control System (aka Revision Control System) - a system for tracking changes to files, usually used to manage changes to a set of files containing source code for a software application.

  Git - a distributed Version Control System tool. It can track changes in files on your local computer, but also symchronize (copy) those changes to remote computers. Git was created by Linus Torvalds, the creator of Linux. We will use Git to copy any changes you make to Heroku.

The Application

The Django web site we will be working with has a simple Polls application. You can present questions to users, allow users to select an answer they would like to vote for, and allow users to view the voting results for each question.

The important files and directories for the web site are as follows:

  django/ - this is the top-level directory for the web site.
  django/manage.py - this is the initialization file for django command-line commands

  django/django_hoc - this is the directory that contains the "root" application of the web site (i.e. Django Hour Of Code)
  django/django_hoc/urls.py - this is the file that looks up the URL given to the web site and calls the specified application

  django/polls - this is the directory that contains the polls application of the web site
  django/polls/urls.py - this is the file that contains the Python data that is used to look up the URL from the web browser and calls the matching Controller/View
  django/polls/models.py - this file contains the Python code for the Models for the polls application
  django/polls/views.py - this file contains the Python code for the Controllers/Views for the polls application.
  django/polls/test.py - this file contains the Python code for the tests for the polls application
  django/polls/templates/polls - this directory contains the HTML templates for the Views

* Note that in Django, the Controller is found in the "views.py" file, and much of the View is found in template files, so Django is sometimes more correctly called a "Model", "Template", "View" design pattern.

The Exercise

1. Run the application on your computer using your web browser.

2. Run the application at Heroku using your web browser.

3. Use the "Django Admin" interface to create a new question and choices to vote on. Run this on your local computer and also Heroku.

4. Run the tests. Create tests for the results page.

5. Display the number of responses for each question on the index page.

6. Deploy your changes from 5 to Heroku using Git.

7. Add a new page to display all the questions with all of the choices for each question and the number of responses for each choice, in order of how many responses each choice received.
